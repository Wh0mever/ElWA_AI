import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo
)

from config import (
    BOT_TOKEN,
    ADMIN_IDS,
    FOREX_PAIRS,
    CRYPTO_PAIRS,
    WEBAPP,
    MAX_LOGIN_ATTEMPTS,
    BLOCK_DURATION_HOURS
)
from utils import (
    get_main_keyboard,
    get_forex_keyboard,
    get_crypto_keyboard,
    get_unauthorized_keyboard,
    get_payment_keyboard,
    get_profile_keyboard,
    save_user_history,
    get_user_history,
    format_signal_message,
    show_typing
)
from keys import (
    verify_key,
    mark_key_as_used,
    is_user_blocked,
    increment_login_attempts,
    reset_login_attempts,
    get_remaining_block_time,
    create_key
)
from market_api import market_api
from ai_model import ai_model

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_user_blocked(user_id):
        remaining = get_remaining_block_time(user_id)
        if remaining:
            hours = remaining.total_seconds() / 3600
            await message.answer(
                f"‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {hours:.1f} —á–∞—Å–æ–≤ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞."
            )
            return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Market AI Analyst!\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ "
        "–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.\n\n"
        "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–≥–æ.",
        reply_markup=get_unauthorized_keyboard()
    )

@dp.message(lambda message: message.text == "üîê –í–≤–µ—Å—Ç–∏ –∫–ª—é—á")
async def enter_key(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX-XXXX"
    )

@dp.message(lambda message: len(message.text) == 14 and message.text.count('-') == 2)
async def check_key(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    user_id = message.from_user.id
    key = message.text.upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_user_blocked(user_id):
        remaining = get_remaining_block_time(user_id)
        if remaining:
            hours = remaining.total_seconds() / 3600
            await message.answer(
                f"‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {hours:.1f} —á–∞—Å–æ–≤ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞."
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
    if verify_key(key):
        mark_key_as_used(key)
        reset_login_attempts(user_id)
        await message.answer(
            "‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            reply_markup=get_main_keyboard(user_id in ADMIN_IDS)
        )
        save_user_history(user_id, "key_activated", {"key": key})
    else:
        attempts = increment_login_attempts(user_id)
        remaining = MAX_LOGIN_ATTEMPTS - attempts
        
        if remaining > 0:
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}"
            )
        else:
            await message.answer(
                "‚õîÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. "
                f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {BLOCK_DURATION_HOURS} —á–∞—Å–æ–≤."
            )

@dp.callback_query(lambda c: c.data == "asset_forex")
async def show_forex_pairs(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ Forex –ø–∞—Ä"""
    await callback.message.edit_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=get_forex_keyboard()
    )

@dp.callback_query(lambda c: c.data == "asset_crypto")
async def show_crypto_pairs(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    await callback.message.edit_text(
        "ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=get_crypto_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith("pair_"))
async def analyze_pair(callback: types.CallbackQuery):
    """–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã"""
    pair_id = callback.data.split('_')[1]
    user_id = callback.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä—ã –∏ –ø–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª
    if pair_id in FOREX_PAIRS:
        pair_info = FOREX_PAIRS[pair_id]
        data = await market_api.get_forex_data(pair_info['symbol'])
    else:
        pair_info = CRYPTO_PAIRS[pair_id]
        data = await market_api.get_crypto_data(pair_info['symbol'])
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await callback.message.edit_text(
        "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
    signal = ai_model.generate_signal(data)
    signal['pair'] = pair_info['symbol']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    save_user_history(user_id, "analysis", signal)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback.message.edit_text(
        format_signal_message(signal),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
    )

@dp.callback_query(lambda c: c.data == "history")
async def show_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = callback.from_user.id
    history = get_user_history(user_id)
    
    if not history:
        await callback.message.edit_text(
            "üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
            ])
        )
        return
    
    text = "üìñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
    for item in history:
        if item['action'] == "analysis":
            text += f"üïí {item['timestamp']}\n"
            text += format_signal_message(item['data']) + "\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
    )

@dp.callback_query(lambda c: c.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=get_profile_keyboard()
    )

@dp.message(lambda message: message.text == "üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def show_payment_options(message: types.Message):
    """–ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    await message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )

@dp.callback_query(lambda c: c.data == "back_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(callback.from_user.id in ADMIN_IDS)
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    key, expires_at = create_key()
    await message.answer(
        f"üîë –ù–æ–≤—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω:\n\n"
        f"–ö–ª—é—á: `{key}`\n"
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at.strftime('%Y-%m-%d %H:%M:%S')}",
        parse_mode="Markdown"
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await market_api.close()

if __name__ == "__main__":
    asyncio.run(main()) 