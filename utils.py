from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo
)
from config import ADMIN_IDS
from datetime import datetime
import json
import os
from typing import Dict, List, Optional
from config import (
    DATA_DIR,
    FOREX_PAIRS,
    CRYPTO_PAIRS,
    WEBAPP,
    USER_HISTORY_DIR
)

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (—Ä—è–¥ 1)
            [
                InlineKeyboardButton(text="XAU/USD üü°", callback_data="pair_XAUUSD"),
                InlineKeyboardButton(text="BTC/USD üí∞", callback_data="pair_BTCUSD"),
            ],
            [
                InlineKeyboardButton(text="EUR/USD üí∂", callback_data="pair_EURUSD"),
                InlineKeyboardButton(text="USD/JPY üí¥", callback_data="pair_USDJPY"),
            ],
            [
                InlineKeyboardButton(text="GBP/USD üí∑", callback_data="pair_GBPUSD")
            ],
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            [
                InlineKeyboardButton(text="üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="history"),
                InlineKeyboardButton(text="üíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            ],
            [
                InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
                InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
            ]
        ]
    )

def get_unauthorized_keyboard() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîê –í–≤–µ—Å—Ç–∏ –∫–ª—é—á")],
            [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")],
            [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_payment_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üá∑üá∫ –†–æ–±–æ–∫–∞—Å—Å–∞", 
                    web_app=WebAppInfo(url="https://payment.robokassa.ru")
                ),
                InlineKeyboardButton(
                    text="üí≥ Stripe", 
                    web_app=WebAppInfo(url="https://checkout.stripe.com")
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", 
                    callback_data="crypto_pay"
                )
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
    )

def get_profile_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton(text="üîë –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á", callback_data="change_key")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
    )

def get_history_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="<< –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 5", callback_data="prev_history"),
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ 5 >>", callback_data="next_history")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
    )

def get_support_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"tg://user?id={ADMIN_IDS[0]}")
            ],
            [
                InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
    )

def get_forex_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Forex –ø–∞—Ä"""
    keyboard = []
    for pair_id, pair_info in FOREX_PAIRS.items():
        keyboard.append([
            InlineKeyboardButton(
                text=f"{pair_info['symbol']} {pair_info['emoji']}", 
                callback_data=f"pair_{pair_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_crypto_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    keyboard = []
    for pair_id, pair_info in CRYPTO_PAIRS.items():
        keyboard.append([
            InlineKeyboardButton(
                text=f"{pair_info['symbol']} {pair_info['emoji']}", 
                callback_data=f"pair_{pair_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_payment_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π",
                web_app=WebAppInfo(url=f"{WEBAPP['URL']}/payment")
            )
        ],
        [
            InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data="pay_crypto")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_stats"),
            InlineKeyboardButton(text="‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="profile_sub")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def ensure_user_history_dir() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not os.path.exists(USER_HISTORY_DIR):
        os.makedirs(USER_HISTORY_DIR)

def save_user_history(user_id: int, action: str, data: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    ensure_user_history_dir()
    history_file = os.path.join(USER_HISTORY_DIR, f"{user_id}.json")
    
    history = []
    if os.path.exists(history_file):
        with open(history_file, 'r', encoding='utf-8') as f:
            history = json.load(f)
    
    history.append({
        'timestamp': datetime.now().isoformat(),
        'action': action,
        'data': data
    })
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –¥–µ–π—Å—Ç–≤–∏–π
    history = history[-100:]
    
    with open(history_file, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def get_user_history(user_id: int, limit: int = 5) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    history_file = os.path.join(USER_HISTORY_DIR, f"{user_id}.json")
    
    if not os.path.exists(history_file):
        return []
    
    with open(history_file, 'r', encoding='utf-8') as f:
        history = json.load(f)
    
    return history[-limit:]

def format_signal_message(signal_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–≥–Ω–∞–ª–æ–º"""
    emoji = "üìà" if signal_data["direction"] == "BUY" else "üìâ"
    return (
        f"{emoji} {signal_data['pair']} | –¢–∞–π–º—Ñ—Ä–µ–π–º: H1\n"
        f"‚û°Ô∏è –°–∏–≥–Ω–∞–ª: {signal_data['direction']} @ {signal_data['entry_price']}\n"
        f"‚úÖ TP: {signal_data['take_profit']} "
        f"({calculate_percent(signal_data['entry_price'], signal_data['take_profit'])}%)\n"
        f"‚ùå SL: {signal_data['stop_loss']} "
        f"({calculate_percent(signal_data['entry_price'], signal_data['stop_loss'])}%)\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {signal_data['probability']}%\n"
        f"–ü–∞—Ç—Ç–µ—Ä–Ω: {signal_data['pattern']}"
    )

def calculate_percent(entry: float, target: float) -> str:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"""
    percent = ((target - entry) / entry) * 100
    return f"{percent:.2f}"

async def show_typing(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
    await message.answer_chat_action("typing")

async def show_progress(message, current: int, total: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞"""
    progress = "‚ñì" * current + "‚ñë" * (total - current)
    await message.edit_text(
        f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...\n"
        f"[{progress}] {current * 10}%"
    ) 